      					第一章：基本概念
1.基本概念和术语
数据（Data）所有能输入到计算机中并被计算机程序处理的符号的总称，加工原料。
数据元素（Data Element）数据的基本单位，通常作为一个整体考虑和处理。
数据项（Data Item）数据元素的可能组成单位。
数据对象（Data Object）Data的一个子集，是性质相同的Data Element的集合。
数据结构（Data Structure）相互之间存在一定特定关系的Data Element的集合
	*****四种基本结构：1.集合 2.线性 3.树形 4.图状或网状
		（集合是其中最松散的一种结构）
	在计算机中的映像称为数据的物理结构，又称存储结构 包括1.数据元素的映像2.关系的映像

计算机中的概念
位（bit）信息最小单位，二进制数的一位。
元素（Element）、节点（Node）若干为组合起来的一个位串表示的数据元素
数据域（Data Field）数据元素由若干数据项组成时，位串对应于各数据项的子位串成为数据域
	***元素或节点可看作Data Element在计算机的映像
计算机中数据元素之间的关系：
	1.顺序映像：借助元素在存储器中的相对位置来表示数据元素的逻辑关系
	2.非顺序映像：借助指示元素存储地址的指针（Pointer）表示数据之间的逻辑关系
由此得到的两种不同的存储结构：
	1.顺序存储结构 2.链式存储结构
	*****算法的设计取决于选定的数据结构，而算法的实现取决于采用的存储结构

数据类型：
1.数据类型（Data Type）是一个值的集合和定义在这个值集上的一组操作的总称
	分类：1.非结构的原子类型，原子类型值是不可分解的。
		如：C语言中基本类型（整型、实型、字符型、枚举型）、指针类型、空类型
	      2.结构类型：由若干成分按某种结构组成的，可分解。
2.抽象数据类型（Abstract Data Type简称ADT）一个值域以及定义在该值域上的一组操作。

	*****两者实质上是一个概念，“抽象”的意义在于数据类型的数学抽象特性。
		不过抽象数据类型的范畴更广
  含有抽象数据类型的软件模块通常有：1.定义 2.表示 3.实现三个部分。
    按值域的不同特性区分：
	1.原子类型(Atomic Data Type):属原子类型，一般很少出现，毕竟原子类型自身就足够
	2.固定聚合类型（Fixed-aggregate Data Type）值域由确定数目的成分按照某种结构组成
	3.可变聚合类型（Variable-Aggregate Data Type）和2比较构成值的成分数目不确定
    后两种类型可统称为结构类型
  抽象数据类型可用三元组表示（D,S,P）
			D:数据对象	S:数据对象的关系集	P:对数据对象的基本操作集
  ADT 抽象数据类型名 |
	数据对象：<数据对象的定义>
	数据关系：<数据关系的定义>
	基本操作：<基本操作的定义>
  | ADT 抽象数据类型名
     其中数据对象和数据关系的定义用伪码描述，格式为：
	基本操作名（参数表） 	*2种参数：只为操作提供输入值；以&开头，除可输入还将返回操					  作结果
	    初始条件（为空可省略）：<初始条件描述>	描述执行前数据结构与参数应满足的								条件，若不满足则操作失败，并返回								相应出错信息
	    操作结果：<操作结果描述>	说明操作正常完成后，数据结构的变化状况和应该返回						的结果
  
3.多型数据类型（Polymorphic Data Type） 其值的成分不确定的数据类型


*****算法和算法分析
算法（Alogorithm）是对特定问题求解步骤的一种描述
特性：
  1.有穷性：一个算法必须总是在执行有穷步结束，别每步时间是有穷
  2.确定性：每条指令必须有确切含义
  3.可行性：描述的操作都是可行可实现的
  4.输入
  5.输出
设计要求：
  1.正确性（Correctness）
  2.可读性（Readability）
  3.健壮性（Robustness）
  4.效率与低存储量需求
效率度量：
**时间复杂度
  算法由控制结构（顺序、分支、循环三种）和原操作（固有数据类型的操作）构成
  所以算法时间取决于两者的综合效果。
  通常做法：选一种属于基本操作的原操作，以该基本操作重复执行的次数作为时间量度
  栗子：
	for(i=1;i<=n;i++){
		for(j=i;j<=n;j++){
			c[i,j]=0;
			for(k=1;k<=n;k++){
				c[i,j]+=a[i,k]*b[k,j];
			}
		}
	}
	执行时间与该基本操作（即乘法）重复执行的次数n^3成正比，T(n)=O(n^3)
	*时间度量记作
		T（n）=O（f（n））
	*它称作算法的渐进时间复杂度（Asymptotic Time Complexity）,简称时间复杂度
 栗子： (a){++x;s=0;}
	(b)for(i=1;i<=n;++i){++x;s+=x;}
	(c)for(j=1;j<=n;++j){
		for(k=1;k<=n;++k){++x;s+=x;}
	   }
	含基本操作“x+1”的频度分别为1，n和n^2，则三个时间复杂度分别为
	O(1),O(n),O(n^2),分别称为常量阶、线性阶、平方阶。
	还有例如：对数阶O（log n）和指数阶O（2^n）等
 ***尽量用多项式阶O（n^k）的算法，而少用指数阶算法





				第二章：线性表
线性结构特点：
	1.存在惟一一个被称作“第一个”的数据元素；
	2.存在惟一一个被称作“最后一个”的数据元素；
	3.除第一个之外，集合中每个数据元素均只有一个前驱；
	4.除最后一个之外，集合中每个数据元素均只有一个后继
	（翻译成人话：有始有终、鳞次栉比）

线性表（Linear-List）：最常用、最简单的数据结构。

构成：数据项（Item）组成 记录（Record）组成 文件（File）

线性表的顺序：用一组地址连续的存储单元依次存储线性表的数据元素
	这种机制称作线性表的顺序存储结构或顺序映像（Sequential Mapping）

线性表插入操作：在某个元素之前插入一个元素时，要将后面的所有元素都向后移动一个位置

线性表删除操作：在某个元素之前删除一个元素时，要将后面的所有元素都向前移动一个位置

*****由此可见，时间主要耗费在移动元素上，移动元素的个数取决于插删元素的位置，尾部添加删除操作最省时间

若以线性表表示集合并进行集合的各种运算，应先对表中元素进行排序


线性表的链式表示和实现
链式的原因：解决线性表的弱点――插入或删除操作时需要移动大量元素。
		在很多场合下它是线性表的首选存储结构
它的缺点：求长度的时候不如顺序型

线链式表：
特点：用一组任意的存储单元存储线性表的数据元素（这组单元可连可不连续）
存储：对于其中的元素来说，存储是除了本身的信息之外，还需要存储直接后继的存储位置。
节点（Node）元素自身+元素直接后继的存储位置
	包括两个域：1.数据域：存储元素自身信息的域。
		    2.指针域：存储直接后继存储位置的域。其中的信息称作“指针”或“链”
链表：n个节点链接成的表，即线性表的链式存储结构。
	由于此链表的每个节点中只包含一个指针域，故又称线性链表或单链表
存取：必须从头指针开始进行，头指针表示第一个节点的存储位置
***最后一个节点没有后继，所以最后一个节点的指针为NULL

栗子：
	头指针：H 31
存储位置	数据域		指针域
   1		  LI	  	 43
   7		 QIAN	  	 13
  13		 SUN	  	  1
  19		 WANG 		 NULL
  25		  WU  		  37
可以看出，各元素的逻辑关系由节点中的指针指示，所以逻辑上两元素存储的物理位置不要求紧邻
****由此，这种存储结构为非顺序映像或链式映像；
*****单链表由头指针唯一确定，在C语言中可用“结构指针”来描述。

头结点：在单链表的第一个节点之前附设的一个节点
	他的数据域可以不存储任何信息，也可以存储如线性表的长度等类的附加信息
	他的指针域存储指向第一个节点的指针

链表中的查找操作：修改前一节点的指针域为插入节点存储位置，要插入节点的指针域指向后一节点
链表中的删除操作：找到被删结点指针域（即后一节点的指向）并将它加入到到前一节点指针域
**由此可见，首尾删插时间消耗相近

*****单链表是一种动态结构，每个链表占用的空间应需求即时生成。
     建立线性表的链式存储结构的过程就是一个动态生成链表的过程。

用数组链表的方法便于在不设‘指针’类型的高级程序设计语言中使用链表结构。
数组的一个分量表示一个节点，同时用游标（指示器cur）代替指针指示节点在数组中的相对位置。
数组的[0]分量可看作头结点，其指针域表示第一个节点。
而且删插操作不需移动元素，仅需修改指针，这是链式存储结构的主要优点。
为了和指针性描述的线性链表区别，用数组描述的链表称作静态链表


循环链表（Circular Linked List）
特点：表中最后一个节点的指针与指向头结点，整个链表结成一个环。

双向链表
双向链表的节点中有两个指针域，一个指向直接后继，一个指向直接前驱
双向链表也可以有循环链表


 			  第三章：栈和队列
**从数据结构角度看，栈和队列也是线性表，属于抽象数据类型
**但特殊性在于，栈和队列的基本操作时线性表操作的子集，操作受限，也因此成为限定性的数据结构

栈（Stack）是限定仅在表尾进行插入或删除操作的线性表（后进先出）
名词：栈顶（Top）栈底（bottom）空栈
栈底指针（bace）顺序栈中始终在栈底，为NULL时表示栈结构不存在
栈顶指针（top）初值指向栈底，每加新元素，指针top增一；删除时减一
栈的存储：
一般来说，在初始化设空栈时不应限定栈的最大容量。
一般合理做法：先分配个基本容量，在应用过程中不够再扩大
		常量：STACK_INIT_SIZE(存储空间初始分配量)
		      STACKINCREMENT(存储空间分配增量)
有顺序栈和链栈两种

应用：1.进制转换，计算过程由低位到高位，输出是需要反过来，使用栈正好
      2.括号匹配
      3.行编辑程序的输入缓冲区
      4.表达式按照算符优先法求职
      5.实现递归，栗子：Hanoi塔问题
汇编程序设计中，主程序与子程序之间的连接及信息交换用的就是栈
高级语言编制的程序中，调用函数和被调用函数之间的连接及信息交换也用栈
*****在一个函数的运行期间调用另一个函数时，在运行被调用函数前，系统要做的是：
	1.将所有实参、返回地址等信息传递给被调用函数
	2.为被调用函数的局部变量分配存储区
	3.将控制转移到被调函数的入口
*****而从被调用函数返回调用函数之前，也应完成：
	1.保存被调函数的计算结果
	2.释放被调函数的数据区
	3.依照被调函数保存的返回地址将控制转移到调用函数
*****如果多个函数构成嵌套调用时，按照后调先回的原则
*****系统将整个程序运行时所需的数据空间安排在一个栈中，每当调用一个函数时，就为他在栈顶分配一个存储区，每当从一个函数退出时，就释放他的存储区，则当前正运行的函数的数据去必须在栈顶